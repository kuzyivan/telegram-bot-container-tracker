import os
import logging
import time
import pandas as pd
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from mail_reader import start_mail_checking  # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—à—É —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_SHEET_CSV = "https://docs.google.com/spreadsheets/d/16PZrxpzsfBkF7hGN4OKDx6CRfIqySES4oLL9OoxOV8Q/export?format=csv"
COORD_FILE = "Stations_coord.xlsx"
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –∂–µ–ª–µ–∑–Ω–æ–π –¥–æ—Ä–æ–≥–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: TCNU1234567), –ª–∏–±–æ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é, —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –ü–æ–º–æ—â—å:\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: TCNU1234567) –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é, —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö."
    )

# /refresh
async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Google Sheets. –ù–∏—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
async def track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip().upper()
    container_list = re.split(r'[\s,;:\n\r\.]+', message_text)
    container_list = [c for c in container_list if c]

    try:
        df = pd.read_csv(GOOGLE_SHEET_CSV)
        df.columns = [str(col).strip().replace('\ufeff', '') for col in df.columns]
        df["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"] = pd.to_datetime(df["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"], format="%d.%m.%Y %H:%M:%S", errors='coerce')

        result_df = (
            df[df["–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"].isin(container_list)]
            .sort_values("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏", ascending=False)
            .drop_duplicates(subset=["–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"])
        )

        if result_df.empty:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä–∞.")
            return

        grouped = result_df.groupby(["–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"])
        reply = "üì¶ –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º:\n"

        for (start_station, end_station), group in grouped:
            reply += f"\nüöÜ *–ú–∞—Ä—à—Ä—É—Ç:* {start_station} ‚Üí {end_station}\n"
            for _, row in group.iterrows():
                station_name = str(row.get("–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")).split("(")[0].strip().upper()
                date_op = row["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"]
                eta_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

                if pd.notnull(row.get("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è")):
                    try:
                        km = float(row["–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è"])
                        eta_days = int(round(km / 600))
                        eta_str = f"—á–µ—Ä–µ–∑ {eta_days} –¥–Ω." if eta_days > 0 else "–º–µ–Ω–µ–µ —Å—É—Ç–æ–∫"
                    except:
                        pass

                date_op_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞" if pd.isnull(date_op) else date_op.strftime('%Y-%m-%d %H:%M')

                if "–≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –≤–∞–≥–æ–Ω–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–º –ø—É–Ω–∫—Ç–µ" in str(row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '')).lower():
                    reply += (
                        f"\nüöÜ *–ú–∞—Ä—à—Ä—É—Ç:* {start_station} ‚Üí {end_station}\n"
                        f"üïì –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {date_op_str}\n"
                        f"üì¨ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–±—ã–ª –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!\n"
                    )
                else:
                    reply += (
                        f"\nüì¶ ‚Ññ –ö–¢–ö: `{row['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']}`\n"
                        f"üõ§ –ú–∞—Ä—à—Ä—É—Ç: {start_station} ‚Üí {end_station}\n"
                        f"üìç –î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {station_name}\n"
                        f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üïì –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {date_op_str}\n"
                        f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {eta_str}\n"
                    )

        await update.message.reply_text(reply, parse_mode="Markdown")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("help", help_command))
telegram_app.add_handler(CommandHandler("refresh", refresh))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    start_mail_checking()  # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –ü–ï–†–ï–î —Å—Ç–∞—Ä—Ç–æ–º Webhook

    telegram_app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )

    while True:
        time.sleep(10)
